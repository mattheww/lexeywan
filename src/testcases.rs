//! Strings for testing lexing.
#![cfg_attr(rustfmt, rustfmt_skip)]

/// The list of test strings used with the --short CLI option.
pub const SHORTLIST: &[&str] = [
    "/* my source file */ fn main() { println!(\"zebra\"); }\n",
    "🦀c",
].as_slice();

/// The list of test strings used by default.
pub const LONGLIST: &[&str] = [

    //// Whitespace

    "",
    " ",
    "  ",
    "\n",
    "\r",
    "\t",
    " \n\r\t ",
    "\u{000B} \u{000C} \u{0085} \u{200E} \u{200F} \u{2028} \u{2029}",


    //// Comments

    "/noncomment",
    "//comment",
    "//comment\n",
    "//comment\n ",
    "//comment\nnext",
    "/// doc comment",
    "/// doc comment\nnext",
    "//// not a doc comment",
    "//// not a doc comment\nnext",
    "//! inner doc comment",
    "//! inner doc comment\nnext",
    "/",
    "//",
    "///",
    "//!",
    "//!!",

    "/* comment */",
    "/* comment */+",
    "/** doc comment */+",
    "/*** not a doc comment */+",
    "/** doc comment */+",
    "/*! inner doc comment */+",
    "/*",
    "/**",
    "/* unterminated",
    "/* unterminated*",
    "/* unterminated/",
    "xxx /* yyy",
    "/*/+",
    "/**/+",
    "/***/+",
    "/*!*/",
    "/*!!*/",
    "/*/*/+",
    "/*/**/*/+",
    "/* xxx /*/+",
    "/* /* xxx */ */+",
    "/*//* /** ///** xxx */*/*/*/+",
    "/* /* xxx */*/+",
    "/* /*/*/* xxx */**/*// */+",
    "/* /* /* /* xxx */ yyy /* */ */ */ */+",

    "// CR \r in line comment",
    "/// CR \r in line doc comment",
    "//! CR \r in inner line doc comment",
    "/* CR \r in block comment */",
    "/** CR \r in block doc comment */",
    "/*! CR \r in inner block doc comment */",

    " //comment",
    " /* comment */ ",
    " /** doc comment */ ",


    //// Punctuation

    "!#$%&()*+,-./:;<=>?@[]^_{|}~",
    r"\",
    "`",

    "++",
    "--",
    "&&",
    "&&+",
    "&& +",
    "& &",
    ">>",
    ">>=",
    ">> =",
    "> >=",
    ">>>",

    "..",
    "...",
    "....",
    ".....",

    "==",
    "===",

    ".=",
    "..=",
    "...=",
    "..==",

    "<<<<",
    "<=<=",
    "<<=",
    "<<<=",
    "<<==",

    "=>=>",
    ">=>=",
    ">>=",
    ">>>=",
    ">>==",

    "||",
    "|||",
    "||||",

    "::",
    "!=",
    "->",
    "<-",
    "+=",
    "-=",
    "*=",
    "/=",
    "%=",
    "^=",
    "&=",
    "|=",

    "$=",
    ":=",
    ";=",
    "?=",
    "@=",
    "~=",

    "##",
    "###",
    "####",
    "#####",

    "x ➖ y",


    //// Identifiers and keywords

    "x",
    "xxx",
    "for",
    "_",
    "__",
    "x_",
    "_x",
    "__x__",
    "Москва",
    "東京",
    "for",
    "€",
    "$crate",
    "r#",
    "r# ",
    "r#x",
    "r#xxx",
    "r#東京",
    "r#for",
    "r#_for",
    "r#3",
    "r#_",
    "r#__",
    "r#crate",
    "r#self",
    "r#super",
    "r#Self",

    "🦁",
    "a🦁",
    "🦁b",
    "🦀c",

    // Identifiers that do and don't need NFC normalisation
    "qa\u{0301}",
    "q\u{e1}",
    "r#qa\u{0301}",
    "r#q\u{e1}",
    "Kelvin Kelvin",
    "Ⅹ Ⅰ Ⅽ",

    // Example of a new character in Unicode 16.0
    "\u{105C9}",
    // Decomposed form of U+105C9
    "\u{105D2}\u{0307}",

    //// Reserved prefixes

    "k#a",
    "q#a",
    "_#a",
    "b#a",
    "c#a",
    "k#'",
    "q#'",
    "_#'",
    "b#'",
    "c#'",

    "br#",
    "br# ",
    "br#x",
    "cr#",
    "cr# ",
    "cr#x",
    "qr#",
    "qr# ",
    "qr#x",

    // See https://github.com/rust-lang/rust/issues/123696
    // (Fixed in rustc 1.79)
    "🦁#",

    //// Double-quote forms

    r#"""#,
    r#""""#,
    r#"""""#,
    r#" " "#,
    r#" "" "#,
    r#" """ "#,

    r#" ""suff"#,
    r#" ""a_"#,
    r#" ""_a"#,
    r#" ""__"#,
    r#" ""_"#,

    "\"xxx\"",
    "\"x\ny\"",
    "\"x\n\ny\"",

    r#" xxx""#,
    r#" "yyy"#,
    r#" xxx"yyy"#,
    r#" xxx"yyy\""#,
    r#" xxx"yyy\"""#,
    r#" xxx"""#,
    r#" "xxx"yyy""#,
    r#" "xxx"""#,
    r#" "xxx""""#,
    r#" "xxx"r"""#,
    r#" "xxx"yyy"zzz"#,
    r#" "xxx"yyy"zzz""#,
    r#" xxx\"yyy"#,

    r#" xxr""#,
    r#" xxr"yyy"#,
    r#" xxr"yyy\""#,
    r#" xxr"yyy\"""#,
    r#" xxr"""#,
    r#" xxr\"yyy"#,
    r#" for""#,
    r#" for"yyy"#,
    r#" for"yyy\""#,
    r#" for"yyy\"""#,
    r#" for"""#,
    r#" for\"yyy"#,

    r#" "xxx"r""#,
    r#" "xxx"r"zzz"#,
    r#" "xxx"r"zzz""#,
    r#" "xxx"b""#,
    r#" "xxx"b"zzz"#,
    r#" "xxx"b"zzz""#,
    r#" r"xxx"""#,
    r#" r"xxx"r""#,
    r#" r"xxx"r"""#,
    r#" r"xxx"r"zzz"#,
    r#" r"xxx"r"zzz""#,
    r#" r"xxx"b""#,
    r#" r"xxx"b"zzz"#,
    r#" r"xxx"b"zzz""#,

    r#" b""#,
    r#" b"yyy"#,
    r#" b"yyy""#,

    r#" r""#,
    r#" r"yyy"#,
    r#" r"yyy""#,
    "r\"x\ny\"",
    "r\"x\n\ny\"",

    r#" br""#,
    r#" br"yyy"#,
    r#" br"yyy""#,
    "br\"x\ny\"",
    "br\"x\n\ny\"",

    r#" c""#,
    r#" c"yyy"#,
    r#" c"yyy""#,
    "c\"x\ny\"",
    "c\"x\n\ny\"",

    r#" cr""#,
    r#" cr"yyy"#,
    r#" cr"yyy""#,
    "cr\"x\ny\"",
    "cr\"x\n\ny\"",

    r#" _""#,
    r#" _"yyy"#,
    r#" _"yyy""#,


    //// Raw-string forms

    r#" r"" "#,
    r#" r"xxx" "#,
    r#" r"\" "#,
    r#" r"\\" "#,
    r#" r"\u{00E6}" "#,

    r##" r#""# "##,
    r##" r#"""# "##,
    r##" r#"x"yy"# "##,
    r##" r#"unterminated" "##,
    r##" r#"xxx#yyy"# "##,
    r##" r#~"x"# "##,

    r###" r##""## "###,
    r###" r##"""## "###,
    r###" r##"x"yy"## "###,
    r###" r##"unterminated" "###,
    r###" r##"unterminated"# "###,
    r###" r##"xxx#yyy"## "###,
    r###" r##"xxx##yyy"## "###,
    r###" r##"xxx"#yyy"## "###,

    r###" r#"extra"## "###,
    r###" r#"extra"##n "###,
    r####" r#"extra"### "####,
    r####" r##"extra"### "####,

    r##" r""suff "##,
    r##" r"xxx"suff "##,
    r##" r#"xxx"#suff "##,
    r###" r##"xxx"##suff "###,

    r##" qr#""# "##,
    r##" qr#"""# "##,
    r##" qr#"x"yy"# "##,
    r##" qr#"unterminated" "##,
    r##" qr#"xxx#yyy"# "##,

    r##" r"xxx"_a "##,
    r##" r"xxx"__ "##,
    r##" r"xxx"_ "##,
    r##" r#"xxx"#_a "##,
    r##" r#"xxx"#__ "##,
    r##" r#"xxx"#_ "##,

    " r###############################################################################################################################################################################################################################################################\"aaa\"############################################################################################################################################################################################################################################################### ",
    " r################################################################################################################################################################################################################################################################\"aaa\"################################################################################################################################################################################################################################################################ ",

    //// Single-quote forms (both character literals and lifetimes/labels)

    " '",
    " ''",
    " '''",
    " 'x",
    " 'x'",
    " 'x''",
    " 'x'y",
    " 'x'yyy",
    " 'x'y'",
    " 'x'yyy'",
    " 'x'y y'",
    " 'x'y'z",
    " 'x'yyy'z",
    " 'x'y y'z",
    " 'x'_",
    " 'x'__",
    " 'xxx",
    " 'xxx'",
    " 'xxx'y",
    " 'xxx'yyy",
    " 'xxx'y'",
    " 'xxx'yyy'",
    " 'xxx'y y'",
    " 'xxx'y'z",
    " 'xxx'yyy'z",
    " 'xxx'y y'z",
    " '_",
    " '#",
    " '##",
    " '#x",
    " '#x'y",
    " 'r#",
    " 'x#",
    " 'xx#",
    " 'r#x",
    " 'x#x",
    " 'xx#x",
    " '$#x",
    " '£#x",
    " 'r#x'y",
    " 'r#xx'y",
    " x'",
    " x''",
    " x'''",
    " x'y",
    " x'yyy",
    " x'y'",
    " x'yyy'",
    " x'y y'",
    " x'y''",
    " x'yyy''",
    " x'y y''",
    " x'y'z",
    " x'yyy'z",
    " x'y y'z",
    " x'y'z'",
    " x'yyy'z'",
    " x'y y'z'",
    " xxx'",
    " xxx''",
    " xxx'''",
    " xxx'y",
    " xxx'yyy",
    " xxx'y'",
    " xxx'yyy'",
    " xxx'y y'",
    " xxx'y''",
    " xxx'yyy''",
    " xxx'y y''",
    " xxx'y'z",
    " xxx'yyy'z",
    " xxx'y y'z",
    " xxx'y'z'",
    " xxx'yyy'z'",
    " xxx'y y'z'",
    " b'",
    " b''",
    " b'''",
    " b'y",
    " b'yyy",
    " b'y'",
    " b'yyy'",
    " b'y y'",
    " b'y''",
    " b'yyy''",
    " b'y y''",
    " b'y'z",
    " b'yyy'z",
    " b'y y'z",
    " b'y'z'",
    " b'yyy'z'",
    " b'y y'z'",
    " _'",
    " _''",
    " _'''",
    " _'y",
    " _'yyy",
    " _'y'",
    " _'yyy'",
    " _'y y'",
    " _'y''",
    " _'yyy''",
    " _'y y''",
    " _'y'z",
    " _'yyy'z",
    " _'y y'z",
    " _'y'z'",
    " _'yyy'z'",
    " _'y y'z'",

    "'_",
    "'__",
    "'for",
    "'crate",
    "'self",
    "'super",
    "'Self",
    "'r#_",
    "'r#__",
    "'r#crate",
    "'r#self",
    "'r#super",
    "'r#Self",

    //// Forms related to the "Guarded string literals" 2024 reservations
    " #\"xxx\"# ",
    " ##\"xxx\"## ",
    " ###\"xxx\"### ",
    " ####\"xxx\"#### ",
    " #####\"xxx\"##### ",
    " #\"xxx\" ",
    " ##\"xxx\"# ",
    " #\"xxx",
    " #\"\"# ",
    " ##\"\"## ",
    " #\"\" ",
    " ##\"\"# ",
    " #\"",
    " ###############################################################################################################################################################################################################################################################\"aaa\"############################################################################################################################################################################################################################################################### ",
    " ################################################################################################################################################################################################################################################################\"aaa\"################################################################################################################################################################################################################################################################ ",
    "£#\"\"#",
    "#'xxx'#",
    "#''#",


    //// Lifetime/label non-ascii
    "'a🦁",
    "'a\u{0301}",
    "'\u{e1}",
    "'Kelvin 'Kelvin",
    "'r#Kelvin 'r#Kelvin",

    //// String escaping (prelexing behaviour)

    r#" "\""#,
    r#" "\\""#,
    r#" "\\\""#,
    r#" "\\\\""#,
    r#" "\\"suff "#,
    r#" "\"""#,
    r#" "\\"""#,

    r#" b"\""#,
    r#" b"\\""#,
    r#" b"\\\""#,
    r#" b"\\\\""#,
    r#" b"\\"suff "#,
    r#" b"\"""#,
    r#" b"\\"""#,

    r#" c"\""#,
    r#" c"\\""#,
    r#" c"\\\""#,
    r#" c"\\\\""#,
    r#" c"\\"suff "#,
    r#" c"\"""#,
    r#" c"\\"""#,

    " \"x \n \0 z\" ",
    " b\"x \n \0 z\" ",
    " c\"x \n z\" ",
    " r\"x \n \0 z\" ",
    " br\"x \n \0 z\" ",
    " cr\"x \n z\" ",

    " \"£ á Ω 🦀 \x07 \u{FFFF} \" ",
    " b\"\x07 \" ",
    " b\"£ \" ",
    " br\"£ \" ",
    " cr\"£ \" ",
    " c\"£ á Ω 🦀 \x07 \u{FFFF} \" ",
    " r\"£ á Ω 🦀 \x07 \u{FFFF} \" ",
    " br\"£ á Ω 🦀 \x07 \u{FFFF} \" ",
    " cr\"£ á Ω 🦀 \x07 \u{FFFF} \" ",

    r" '\'",
    r" '\\'",
    r" '\\\'",
    r" '\\\\'",
    r" '\\'suff ",
    r" '\''",
    r" '\\''",
    r" '\'",

    r" '£' ",
    r" '🦀' ",
    r" '\nx' ",
    r" '\u{00e6}x' ",
    " '\\\n' ",
    " '\x00' ",
    " '\t' ",
    " '\n' ",
    " '\x07' ",
    " '\u{0080}' ",
    " '\u{FFFF}' ",

    r" b'£' ",
    r" b'🦀' ",
    r" b'\nx' ",
    r" b'\u{00e6}x' ",
    r" b'\' ",
    r" b'\\' ",
    " b'\\\n' ",
    " b'\x00' ",
    " b'\t' ",
    " b'\n' ",
    " b'\x07' ",
    " b'\u{0080}' ",
    " b'\u{FFFF}' ",

    // String unescaping

    r#" "\x00 \x7f \' \" \n \r \t \\ \0" "#,
    r#" "\x00\x7f\'\"\n\r\t\\\0" "#,
    r#" "\x80 \xff" "#,
    r#" "\x" "#,
    r#" "\xz" "#,
    r#" "\xzz" "#,
    r#" "\x\\" "#,
    r#" "\z" "#,

    r#" "\u{00e6}" "#,
    r#" "\u{00E6}" "#,
    r#" "\u{2192}" "#,
    r#" "\u{1f980}" "#,
    r#" "abc\u{00E6}" "#,
    r#" "\u{00E6}\n" "#,
    r#" "\u{00E6" "#,
    r#" "\u{00E6abc" "#,
    r#" "\u{00E6\n" "#,
    r#" "\u00E6}" "#,
    r#" "\u00E6" "#,
    r#" "\u{00}" "#,
    r#" "\u{ff}" "#,
    r#" "\u{00_00_E6}" "#,
    r#" "\u{00000E6}" "#,
    r#" "\u{10FFFF}" "#,
    r#" "\u{110000}" "#,
    r#" "\u{00G6}" "#,
    r#" "\u{D800}" "#,
    r#" "\u{-1}" "#,
    r#" "\u{}" "#,
    r#" "\u{_}" "#,
    r#" "\u{_00e6}" "#,
    r#" "\u{00e6_}" "#,
    r#" "\u00e6" "#,

    r#" b"\x00 \x7f \' \" \n \r \t \\ \0" "#,
    r#" b"\x80 \xff" "#,
    r#" b"\u{00e6}" "#,
    r#" b"\z" "#,

    r#" c"\x7f \' \" \n \r \t \\" "#,
    r#" c"\x80 \xff" "#,
    r#" c"\u{00e6}" "#,
    r#" c"\u{2192}" "#,
    r#" c"\u{1f980}" "#,
    r#" c"\z" "#,
    r#" c"£" "#,

    r" '\x00' ",
    r" '\x7f' ",
    r" '\xff' ",
    r" '\u{00e6}' ",
    r" '\u{2192}' ",
    r" '\n' ",
    r" '\r' ",
    r" '\t' ",
    r" '\0' ",
    r#" '\"' "#,

    r" b'\x00' ",
    r" b'\x7f' ",
    r" b'\xff' ",
    r" b'\u{00e6}' ",
    r" b'\u{2192}' ",
    r" b'\n' ",
    r" b'\r' ",
    r" b'\t' ",
    r" b'\0' ",
    r#" b'\"' "#,

    " \"string\\\ncontinuation\"",
    " \"string\\\n continuation\"",
    " \"string\\\n\n\r\tcontinuation\"",
    " \"string\\\n    ",

    " b\"string\\\ncontinuation\"",
    " b\"string\\\n continuation\"",
    " b\"string\\\n\n\r\tcontinuation\"",
    " b\"string\\\n    ",

    " c\"string\\\ncontinuation\"",
    " c\"string\\\n continuation\"",
    " c\"string\\\n\n\r\tcontinuation\"",
    " c\"string\\\n    ",

    " \"non-NFC a\u{0301}\" ",
    " \"NFC \u{e1}\" ",
    " \"Kelvin Kelvin\" ",


    //// CR checks:

    " '\r'",
    " b'\r'",

    " \"CR \r forbidden\"",
    " b\"CR: \r forbidden\"",
    " c\"CR: \r forbidden\"",

    " r\"CR: \r forbidden\"",
    " br\"CR: \r forbidden\"",
    " cr\"CR: \r forbidden\"",

    " \"CR in string\\\n\n\r\tcontinuation \"",
    " b\"CR in string\\\n\n\r\tcontinuation \"",
    " c\"CR in string\\\n\n\r\tcontinuation \"",

    " r\"not a string\\\n  \r  continuation \" ",
    " br\"not a string\\\n  \r  continuation \" ",
    " cr\"not a string\\\n  \r  continuation \" ",


    //// NUL in C string

    " c\"\0\" ",
    r#" c"\0" "#,
    r#" c"\x00" "#,
    r#" c"\u{0}" "#,
    r#" c"\u{00000}" "#,
    r#" c"\u{0_0_0_0}" "#,
    " cr\"\0\" ",


    //// Integer

    "0 00 123",
    "9876543210",
    "1_2_3_4",
    "1_2_3_4_",
    "123suffix",
    "123f64",
    "123_suffix",
    "123e",
    "123E",
    "123_e",
    "123em",
    "123EM",
    "123_em",
    "123e_",
    "123e__",
    "123_·",
    "123·",
    "340282366920938463463374607431768211456",
    "9999999999999999999999999999999999999999",

    "0b",
    "0b__",
    "0be",
    "0bE",
    "0bem",
    "0b·",
    "0be0·",
    "0b101",
    "0b_0_1_0_",
    "0b_0_1_0_suffix",
    "0b19",
    "0b1a",
    "0b1e",
    "0b1em",
    "0_b101",

    "0o",
    "0o__",
    "0oe",
    "0oE",
    "0oem",
    "0o·",
    "0oe0·",
    "0o1234567",
    "0o_1_2_3_suffix",
    "0o1234568",
    "0o1234569",
    "0o123a",
    "0o1e",
    "0o1em",

    "0x",
    "0x__",
    "0xa",
    "0xe",
    "0xem",
    "0x·",
    "0xe0·",
    "0xabcde",
    "0x_a_b_c_d_e_",
    "0xabcdefg",
    "0xabcdef_g",
    "0xA",
    "0xE",
    "0xABCDE",
    "0x_A_B_C_D_E_",
    "0xABCDEFG",
    "0xABCDEF_G",
    "0xffffffffffffffffffffffffffffffffffffffff",
    "0x01_e3",
    "0x01e3",
    "0x01_E3",
    "0x01E3",
    "0x1e",
    "0x1em",

    "0B0",
    "0O0",
    "0X0",
    "0z0",

    "1️⃣",

    //// Float

    "0.0",
    "123.4",
    "9999999999999999999999999999999999999999.9999999999999999999999999999999999999999",
    "123.40",
    "123.45f32",
    "123.4.5",
    "123.4_5_6_",
    "123.4_",
    "123.4_suff",
    "0x1ffp10",

    "1.",
    "1.f32",
    "1.xxx",
    "1.a",
    "1.e2",
    "1..2",
    "0x1..2",
    r#"1.b"xxx""#,
    r#"1.c"xxx""#,
    r#"1.r"xxx""#,
    r#"1.q"xxx""#,
    r#"1.r#for"#,

    "0e",
    "0e_",
    "0e_1",
    "0_e",
    "123e5",
    "123e5f64",
    "123e5_f64",
    "123e+5",
    "123e-5",
    "123E5",
    "123E+5",
    "123E-5",
    "123e+",
    "123e-",
    "123e_5",
    "123e_5_",
    "123e_suff",
    "123e_suff_",
    "123e+x",
    "123e+_",
    "123e+_x",
    "123e+_5",
    "123e+_56_f64",
    "123e+_+",
    "123e_+56",
    "123e++",

    "123.4e5",
    "123.4e5f64",
    "123.4e5f_64",
    "123.4_5_6_e7",
    "123.4e+5",
    "123.4e-5",
    "123.4E5",
    "123.4_5_6_E7",
    "123.4E+5",
    "123.4E-5",
    "123.4e",
    "123.4e+",
    "123.4e-",
    "123.4e_",
    "123.4e__",
    "123.4e_5",
    "123.4e_5_",
    "123.4e_suff",
    "123.4e+x",
    "123.4e+_",
    "123.4e+_x",
    "123.4e+_5",
    "123.4e+_56_f64",
    "123.4e+_+",
    "123.4e_+56",
    "123.4e++",

    "123.4e_5",
    "123.4e_",
    "123.4e",
    "123.4em",
    "123.4_e",
    "123.4_em",
    "123.4e5em",
    "123.4e5_em",
    "123e4em",
    "123e4_em",
    "123.4E_5",
    "123.4E",
    "123.4EM",
    "123E4EM",

    // See https://github.com/rust-lang/rust/pull/131656
    "123·",
    "123.4·",
    "123e·",
    "123e4·",
    "123_·",
    "123.4_·",
    "123e_·",
    "123e__·",
    "123e4_·",
    "123.4e_·",
    "123.4e5_·",
    "123e4e_·",
    "123.4e5e_·",
    "123e+_·",
    "123.4e+_·",

    ".0",
    "123e5.6",
    "123._4_5_6_",
    "123._4e5",
    "123._",

    "0b1.0",
    "0o1.2",
    "0x1.2",
    "0xa.2",
    "0b1. 0",
    "0o1. 2",
    "0x1. 2",
    "0x1e2",
    "0xAe2",
    "0o1e2",
    "0o9e2",
    "0oAe2",
    "0b1e0",
    "0bAe0",
    "0z3.4",


    // Colour- and UUID-like forms, that macros might use

    "#aabbcc",
    "#aabb11",
    "#112233",
    "#1122aa",
    "#112e33",
    "#112e3a",
    "#11223e",
    "#1122ea",
    "7ad85a2c-f2d0-11fd-afd0-b3104db0cb68",
    "7ad85a2c-f2d0-11ed-afd0-b3104db0cb68",
    "7ad85a2c-f2d0-111e-afd0-b3104db0cb68",


    //// Combinations

    "/* my source file */ fn main() { println!(\"zebra\"); }\n",
    r##"-1+0zzz1 2yyy(3)-[4]+{5}r#foo2!'bar 67"qqq"8'lbl/**/fn"##,
    r##" "string\"one"_suff ident "stringtwo" "##,
    "\x01\x02\x03\x04\x05\x06\x07\x08\x09\x0a\x0b\x0c\x0d\x0e\x0f\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f",


    //// BOM

    "\u{feff}bom",
    "bom\u{feff}\n\u{feff}bom\n",


    //// CRLF removal
    "one\r\ntwo\r\nthree",
    "one\r\ntwo\rthree",
    " \"one\r\ntwo\r\nthree\" ",
    " \"one\r\ntwo\rthree\" ",
    " r\"one\r\ntwo\r\nthree\" ",
    " r\"one\r\ntwo\rthree\" ",
    " b\"one\r\ntwo\r\nthree\" ",
    " b\"one\r\ntwo\rthree\" ",
    " //!one\r\ntwo\r\nthree ",
    " //!one\r\ntwo\rthree\" ",
    " \"one\r\r\ntwo\" ",
    " r\"one\r\r\ntwo\" ",


    //// Shebang

    "#!/shebang\nfn",
    "#!\nfn",
    "#!",
    "#!shebang",
    "#!shebang\nfn",
    "#![attr]\nfn",
    "#! [attr]\nfn",
    "#!\n[attr]\nfn",

    //// Delimiters

    "x ( [ { ((y)) } ] ) z",

]
.as_slice();

/// These tests fail
pub const XFAIL: &[&str] = [
    // Unhandled cases of shebang (comment-in-attribute)
    "#! /* oops */ [attr]\nfn",
    "#! // oops\n[attr]\nfn",

    // At present we can't see rustc lexing input with unbalanced delimiters
    "unbalanced ( parens",
]
.as_slice();
